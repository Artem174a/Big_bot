import time

from aiogram import Dispatcher
from aiogram.types import Message
from tgbot.database.DB import Database as Db
from tgbot.keyboards.inline import *
from tgbot.functions.services import *


async def callback_account(call: types.CallbackQuery):
    if call.data == "get_account":
        await Account(call=call).get_account()
    if call.data == "back_to_account":
        await Account(call=call).back_to_account()
    if call.data == "subscribe_account":
        await Account(call=call).subscribe_account()
    if call.data == "info_account":
        await Account(call=call).info_account()
    if call.data == "support_account":
        await Account(call=call).support_account()


async def callback_menu(call: types.CallbackQuery):
    if call.data == "get_menu":
        await Menu(call=call).get_menu()
    if call.data == "back_to_menu":
        await Menu(call=call).back_to_menu()


async def callback_services(call: types.CallbackQuery, dp: Dispatcher = None):
    if call.data == "get_services":
        await Services(call=call).get_services()
    if call.data == "back_to_services":
        await Services(call=call).back_to_services()
    if call.data[len(call.data) - 4:] == "serv":
        print(call.data[:len(call.data) - 5])
        await eval(f"{call.data[:len(call.data) - 5]}(call=call).get_service()")


class Services:
    def __init__(self, message: Message = None, call: types.CallbackQuery = None):
        if message:
            self.object = message
            self.send_message = message.answer
            self.edit_message_text = message.edit_text
        elif call:
            self.object = call
            self.send_message = call.message.answer
            self.edit_message_text = call.message.edit_text
        self.message = message
        self.call = call
        self.get_user = Db().get_user(self.object.from_user.id)
        self.services_info = f'''
<b>–°–µ—Ä–≤–∏—Å—ã</b>
<em>–ó–¥–µ—Å—å –≤—ã —Å–º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –Ω—É–∂–Ω—ã–π –≤–∞–º —Å–µ—Ä–≤–∏—Å</em>
<b>

–î–µ–π—Å—Ç–≤—É—é—â–∏–µ —Å–µ—Ä–≤–∏—Å—ã:
‚ïò <em>–ü—Ä–æ—Ç–æ—Ç–∏–ø ChatGPT</em>
</b>

'''

    async def get_services(self):
        await self.send_message(text=self.services_info, reply_markup=InlineKeyboard().services())

    async def back_to_services(self):
        await self.edit_message_text(text=self.services_info, reply_markup=InlineKeyboard().services())


class Menu:
    def __init__(self, message: Message = None, call: types.CallbackQuery = None):
        if message:
            self.object = message
            self.send_message = message.answer
            self.edit_message_text = message.edit_text
        elif call:
            self.object = call
            self.send_message = call.message.answer
            self.edit_message_text = call.message.edit_text
        self.message = message
        self.call = call
        self.get_user = Db().get_user(self.object.from_user.id)
        self.menu_info = f'''
<b>–ú–µ–Ω—é</b>
<em>–û—Å–Ω–æ–≤–Ω–æ–µ –æ —á–∞—Ç-–±–æ—Ç–µ</em>
<b>
–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!

–î–µ–π—Å—Ç–≤—É—é—â–∏–µ —Å–µ—Ä–≤–∏—Å—ã:
‚ïò <em>–ü—Ä–æ—Ç–æ—Ç–∏–ø ChatGPT</em>
</b>

'''

    async def get_menu(self):
        await self.send_message(text=self.menu_info, reply_markup=InlineKeyboard().menu())

    async def back_to_menu(self):
        await self.edit_message_text(text=self.menu_info, reply_markup=InlineKeyboard().menu())


class Account:
    def __init__(self, message: Message = None, call: types.CallbackQuery = None):
        if message:
            self.object = message
            self.send_message = message.answer
            self.edit_message_text = message.edit_text
        elif call:
            self.object = call
            self.send_message = call.message.answer
            self.edit_message_text = call.message.edit_text
        self.message = message
        self.call = call
        self.get_user = Db().get_user(self.object.from_user.id)
        self.account_info = f'''
<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∞–∫–∫–∞—É–Ω—Ç–µ:</b>
<em>–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—à–µ–º –∞–∫–∫–∞—É–Ω—Ç–µ</em>
<b>
üìÅ–î–æ—Å—Ç—É–ø
‚ïû ID: <code>{self.get_user.telegram_id}</code>
‚ïû –õ–æ–≥–∏–Ω: <code>@{self.get_user.username}</code>
‚ïû –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: <code>{time.strftime('%d.%m.%Y –≥.', time.gmtime(self.get_user.registration_time))}</code>
‚ïû Email: <code>{self.get_user.email}</code>
‚ïò Phone: <code>{self.get_user.phone}</code>
   
üíµ 
‚ïû –ü–æ–¥–ø–∏—Å–∫–∞: <code>{self.get_user.subscribe_date}</code>
‚ïû –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: <code>{self.get_user.referrals}</code>
‚ïò Money: <code>{self.get_user.money}</code>
</b>

'''
        self.subscribe_info = "–ü–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ"
        self.info_info = "–ü–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ"
        self.support_info = "–ü–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ"

    async def get_account(self):
        await self.send_message(text=self.account_info, reply_markup=InlineKeyboard().account_menu())

    async def back_to_account(self):
        await self.edit_message_text(text=self.account_info, reply_markup=InlineKeyboard().account_menu())

    async def subscribe_account(self):
        await self.call.answer(text=self.subscribe_info)

    async def info_account(self):
        await self.call.answer(text=self.info_info)

    async def support_account(self):
        await self.call.answer(text=self.subscribe_info)
